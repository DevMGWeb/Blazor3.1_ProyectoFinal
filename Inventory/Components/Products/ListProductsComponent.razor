@using Entities
@using Business
@inject NavigationManager NavigationManager

<select class="form-control" @onchange="CategoryChanged">
    <option value="n">Ver Todos los Productos</option>
    @foreach (var category in categories)
    {
    <option value="@category.CategoryId">@category.CategoryName</option>
    }
</select>
<hr />

<table class="table table-hover table-bordered">
    <thead class="thead-light">
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Categoria</th>
            <th>Cantidad</th>
            <th colspan="2">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts)
        {
        <tr>
            <td>@product.ProductId</td>
            <td>@product.ProductName</td>
            <td>@product.CategoryId</td>
            <td>@product.TotalQuantity</td>
            <td><a class="btn btn-dark" href="product/update/@product.ProductId">Editar</a></td>
            <td><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Eliminar</button></td>
        </tr>
}
    </tbody>
</table>

@message

@code { List<ProductEntity> products = new List<ProductEntity>();
    List<ProductEntity> tempProducts = new List<ProductEntity>();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    string message;

    protected override async Task OnInitializedAsync()
    {
        products = B_Product.ProductList();
        tempProducts = products;
        categories = B_Category.CategoryList();
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        var id = e.Value.ToString();

        tempProducts = products.Where(c => c.CategoryId == id
                || id == "n").ToList();
    }

    private void DeleteProduct(ProductEntity oProduct)
    {
        B_Product.DeleteProduct(oProduct);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    } 
}
